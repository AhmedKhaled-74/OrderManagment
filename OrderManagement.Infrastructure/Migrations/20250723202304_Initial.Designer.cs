// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OrderManagement.Infrastructure.DbContexts;

#nullable disable

namespace OrderManagement.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250723202304_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence<int>("OrderNumberSequence");

            modelBuilder.Entity("OrderManagement.Core.Domain.Entities.Item", b =>
                {
                    b.Property<Guid>("itemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("itemName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("itemPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("itemTotalQuantity")
                        .HasColumnType("bigint");

                    b.HasKey("itemId");

                    b.ToTable("Items", (string)null);

                    b.HasData(
                        new
                        {
                            itemId = new Guid("71721afe-3d15-4e24-bbf0-d19d90130b6d"),
                            itemName = "Laptop Omine",
                            itemPrice = 999.99m,
                            itemTotalQuantity = 50L
                        },
                        new
                        {
                            itemId = new Guid("d74d4ef8-4efa-4865-9f15-52243c3320f7"),
                            itemName = "IPhone15",
                            itemPrice = 699.99m,
                            itemTotalQuantity = 100L
                        },
                        new
                        {
                            itemId = new Guid("65811328-1c98-4f2d-ba52-17cc34285225"),
                            itemName = "Air Pods",
                            itemPrice = 149.99m,
                            itemTotalQuantity = 200L
                        },
                        new
                        {
                            itemId = new Guid("d60609e0-7915-4dc1-808b-c9f31b2d8b50"),
                            itemName = "Keyboard Logitech 250x4b4",
                            itemPrice = 79.99m,
                            itemTotalQuantity = 150L
                        },
                        new
                        {
                            itemId = new Guid("8b241257-bfc6-4fdb-ba3c-d5cbce698fd9"),
                            itemName = "Mouse Copra M11",
                            itemPrice = 29.99m,
                            itemTotalQuantity = 300L
                        });
                });

            modelBuilder.Entity("OrderManagement.Core.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("orderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("customerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("orderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("orderNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("CONCAT('Order_', YEAR(GETDATE()), '_', NEXT VALUE FOR dbo.OrderNumberSequence)");

                    b.HasKey("orderId");

                    b.ToTable("Orders", (string)null);

                    b.HasData(
                        new
                        {
                            orderId = new Guid("4af1776a-a87f-4f76-9418-18d84002e439"),
                            customerName = "John Doe",
                            orderDate = new DateTime(2023, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            orderId = new Guid("27786645-a44a-494b-89ca-c30588ddc137"),
                            customerName = "Jane Smith",
                            orderDate = new DateTime(2023, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("OrderManagement.Core.Domain.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("orderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("itemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("itemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("orderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("quantity")
                        .HasColumnType("bigint");

                    b.Property<decimal>("unitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("orderItemId");

                    b.HasIndex("itemId");

                    b.HasIndex("orderId");

                    b.ToTable("OrderItems", (string)null);

                    b.HasData(
                        new
                        {
                            orderItemId = new Guid("12eb0d68-3d4f-4378-abb4-767720838a6e"),
                            itemId = new Guid("71721afe-3d15-4e24-bbf0-d19d90130b6d"),
                            itemName = "Laptop Omine",
                            orderId = new Guid("4af1776a-a87f-4f76-9418-18d84002e439"),
                            quantity = 2L,
                            unitPrice = 999.99m
                        },
                        new
                        {
                            orderItemId = new Guid("b38cbdb5-fb2e-4e77-acc2-6f23e09936d3"),
                            itemId = new Guid("d60609e0-7915-4dc1-808b-c9f31b2d8b50"),
                            itemName = "Keyboard Logitech 250x4b4",
                            orderId = new Guid("4af1776a-a87f-4f76-9418-18d84002e439"),
                            quantity = 2L,
                            unitPrice = 79.99m
                        },
                        new
                        {
                            orderItemId = new Guid("061d2367-e16b-4d23-9ece-e1a287f7f615"),
                            itemId = new Guid("d74d4ef8-4efa-4865-9f15-52243c3320f7"),
                            itemName = "IPhone15",
                            orderId = new Guid("4af1776a-a87f-4f76-9418-18d84002e439"),
                            quantity = 1L,
                            unitPrice = 699.99m
                        },
                        new
                        {
                            orderItemId = new Guid("86075d69-54e4-4a96-b474-7de4b6215c5b"),
                            itemId = new Guid("d74d4ef8-4efa-4865-9f15-52243c3320f7"),
                            itemName = "IPhone15",
                            orderId = new Guid("27786645-a44a-494b-89ca-c30588ddc137"),
                            quantity = 1L,
                            unitPrice = 699.99m
                        });
                });

            modelBuilder.Entity("OrderManagement.Core.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("OrderManagement.Core.Domain.Entities.Item", "item")
                        .WithMany("orderItems")
                        .HasForeignKey("itemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OrderManagement.Core.Domain.Entities.Order", "order")
                        .WithMany("orderItems")
                        .HasForeignKey("orderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("item");

                    b.Navigation("order");
                });

            modelBuilder.Entity("OrderManagement.Core.Domain.Entities.Item", b =>
                {
                    b.Navigation("orderItems");
                });

            modelBuilder.Entity("OrderManagement.Core.Domain.Entities.Order", b =>
                {
                    b.Navigation("orderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
